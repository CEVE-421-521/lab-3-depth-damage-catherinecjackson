---
title: "Lab 3: Depth-Damage Models"
subtitle: "DataFrames and Distributions"
author: "Catherine Jackson"
date: 2024-02-06
week: 3
categories: [Lab]

# code to use
jupyter: julia-1.10

format: 
    html:
        theme: spacelab
        copy-code: true
        code-overflow: wrap
        toc: true
        anchor-sections: true
        callout-appearance: simple
        reference-location: document
        citations-hover: true
        code-annotations: hover
        code-line-numbers: true
        html-math-method: katex

    # YOU CAN DO PDF OR DOCX BUT NOT BOTH
    # IF YOU UNCOMMENT docx, COMMENT OR DELETE pdf
    pdf:
        documentclass: article
        fontsize: 11pt
        geometry:
            - margin=1in  
        number-sections: true
        code-line-numbers: true

    #docx: 
    #    toc: true
    #    fig-format: png
    #    number-sections: true
    #    code-line-numbers: true

date-format: "ddd., MMM. D"
---


```{julia}
using CSV
using DataFrames
using DataFramesMeta
using Distributions
using Interpolations
using Plots
using StatsPlots
using Unitful

Plots.default(; margin=6Plots.mm)
```

# Site information

## Site of Interest

I have chosen the Galveston Pier 21 site as my water gage and a home at 304 18th St, Galveston, TX 77550 to be my site of interest.  I chose this site as it is a residential building within half a mile of the water gage itself.  Furthermore, it is still very close to the coast of Galveston channel.  For this reason, it is a good candidate for exploring and understanding the impacts of coastal flooding and the complexities of making decisions on flood mitigation strategies.

## Site Elevation

Using USGS's National Map Viewer, I found the following information:

Feet: 4.33
Meters: 1.32
DD: 29.30758° -94.78810°
DMS: 29° 18' 27.283" N     94° 47' 17.153" W
UTM: 15 326343 3243390
USNG: 15R UN 26342 43390 (NAD 83)
MGRS: 15RUN2634243390

*Note: Spot elevation query values from the3DEP are not official and do not represent precisely measured or surveyed values.*

It is important to determine the elevation of the building because our data is sourced from a nearby gage.  This nearby gage has a distribution which represents the water levels at this gage, but they must be adjusted to represent the distribution of the water levels at the ground floor level of the building.

# Depth-Damage

## Identify the Appropriate Depth-Damage Function

Flood Depth-Damage curves are commonly used functions that relate the flood depth (measured above the ground flood) and the relaive damage (%).  In other words, if given a flood depth, these relationships would make predictions about the expected damage to a building.  These relationships are important for understanding the potential impacts of flooding and for making decisions about flood mitigation strategies.  However, there are some downsides and issues with these relationships, but they can be a good initial estimate.  Furthermore, when paired with flood distributions, they can be used to estimate the expected annual damages or the expected damages over a longer time period.  This can be done analytically, but, in practice, a Monte Carlo simulation is often used.

First, then, it is necessary to find this function for the site of interest such that, for flooding in the area of this site measured at the gage, predictions can be made about the expected damage to the building.  I opened up the variable hax_fl_dept.csv to find the right function.  First, I sorted the descriptions to find the functions that applied to two story buildings without a basement.  I also looked for the functions which analyzed the damage to the structure, rather than the contents.  In addition, the physical location of the structure is important, and the Army Corps of Engineers provides different functions for different areas.  Therefore, looking for the right type of curve and for curves from USACE - Galveston, Function 140 was appropriate (e.g. DmgFnId=140).  We also want the residential occupancy, so this must be filtered as well.

## Build the Depth-Damage Curve

First, the correct depth-damage curve is pulled from the DataFrame and saved as dd.

```{julia}
include("depthdamage.jl")
haz_fl_dept = CSV.read("data/haz_fl_dept.csv", DataFrame)
first(haz_fl_dept, 3)
demo_row = @rsubset(
    haz_fl_dept, :Description == "two story, no basement, Structure", :Occupancy == "RES1", :Source == "USACE - Galveston", :DmgFnId == 140
)[
    1, :,
]
display(demo_row)
dd = DepthDamageData(demo_row)
fieldnames(typeof(dd))
```

As discussed in the tutorial, we can take a quick check at the original plot to make sure it looks reasonable.

```{julia}
scatter(
    dd.depths,
    dd.damages;
    xlabel="Flood Depth at House",
    ylabel="Damage (%)",
    label="$(dd.description) ($(dd.source))",
    legend=:bottomright,
    size=(700, 500),
)
```


```{julia}
function get_depth_damage_function(
    depth_train::Vector{<:T}, dmg_train::Vector{<:AbstractFloat}
) where {T<:Unitful.Length}

    # interpolate
    depth_ft = ustrip.(u"ft", depth_train)
    interp_fn = Interpolations.LinearInterpolation(
        depth_ft, # <1>
        dmg_train;
        extrapolation_bc=Interpolations.Flat(), # <2>
    )

    damage_fn = function (depth::T2) where {T2<:Unitful.Length}
        return interp_fn(ustrip.(u"ft", depth)) # <3>
    end
    return damage_fn # <4>
end
```

```{julia}
display(dd.depths)
global damage_fn = get_depth_damage_function(dd.depths, dd.damages)
```

```{julia}
p = let
    depths = uconvert.(u"ft", (-7.0u"ft"):(1.0u"inch"):(30.0u"ft")) # <1>
    damages = damage_fn.(depths) # <2>
    scatter(
        depths,
        damages;
        xlabel="Flood Depth",
        ylabel="Damage (%)",
        label="$(dd.description) ($(dd.source))",
        legend=:bottomright,
        size=(800, 400),
        linewidth=2,
    )
end
p
```

# Expected Annual Damages

## Flood distribution

```{julia}
gauge_dist = GeneralizedExtremeValue(5, 1.5, 0.1)
```

We can see some quantiles of the distribution:

```{julia}
quantile.(gauge_dist, [0.5, 0.9, 0.99, 0.999])
```

and we can plot it using `StatsPlots`:

```{julia}
p1 = plot(
    gauge_dist;
    label="Gauge Distribution",
    xlabel="Water Level (ft)",
    ylabel="Probability Density",
    legend=:topright,
    linewidth=2,
)
```

Our building might be above the gauge.
We can correct for this by adding an offset to the **location parameter** of the gauge.
Again, we are taking hypothetical values here!

```{julia}
offset = 4.3 # house is 2.5 feet above gauge
house_dist = GeneralizedExtremeValue(gauge_dist.μ - offset, gauge_dist.σ, gauge_dist.ξ)
```

We can plot this

```{julia}
plot!(p1, house_dist; label="House Distribution", linewidth=2) # <1>
```

## Monte Carlo Sampling

```{julia}
plot()
samplesrand = rand(house_dist, 100)
h1 = histogram!(samplesrand; label="House Distribution", alpha=0.5, normed=true, size=(800, 400), title="House Flood Distribution 100 Samples")
plot()
samplesrand10000 = rand(house_dist, 1000)
h2 = histogram(samplesrand10000; label="House Distribution", alpha=0.5, normed=true, size=(800, 400), title="House Flood Distribution 1000 Samples")
plot()
samplesrand100000 = rand(house_dist, 10000)
h3 = histogram(samplesrand100000; label="House Distribution", alpha=0.5, normed=true, size=(800, 400), title="House Flood Distribution 10000 Samples")

# plot h1 h2 and h3 side by side make the title text smaller
plot(h1, h2, h3, layout=(1, 3), size=(800, 400), titlefontsize=8)
```

```{julia}
n_samples = 1_000_000
vecsamples = rand(house_dist, n_samples)
vecsamples = vecsamples .* u"ft"
damages = damage_fn.(vecsamples)
expecteddamages = mean(damages)
```

```{julia}
emp = scatter()
x_values = Int[]
y_values = Float64[]

for i = 1:1000
    n_samples = 1_000_000
    vecsamples = rand(house_dist, n_samples)
    vecsamples = vecsamples .* u"ft"
    damages = damage_fn.(vecsamples)
    expecteddamages = mean(damages)
    push!(x_values, i)
    push!(y_values, expecteddamages)
end

scatter!(emp, x_values, y_values; label="Expected Damage", markersize=2)
emp
```



```{julia}
combine=[vecsamples damages]
randrows1000 = combine[rand(1:size(combine, 1), 1000), :]
samplesrand1000 = ustrip(randrows1000[:, 1])
damagesrand1000 = randrows1000[:, 2]
scatter(samplesrand1000, damagesrand1000; label="House Distribution", alpha=0.5, size=(800, 400), title="House Flood Distribution 1000 Samples")
```

```{julia}
# add a horizontal line at the expected damage
dp = plot!(
    dp, [vecsamples[1], vecsamples[end]], [expecteddamages, expecteddamages]; label="Expected Damage", linewidth=2
    )
display(dp)
```

# Discussion

5. **Build the depth-damage curve.** Use the tools we have built in this workshop to build a depth-damage curve for your building. Plot the curve in 1 inch increments from -10 to 30 feet, as above. Explain what it means.
6. Implement the Monte Carlo algorithm described above to estimate the expected annual damages. Use 1,000,000 samples. Explain what this means.

Finally, add any plots or discussion that you think are relevant!
For example, consider looking at plausible alternative depth-damage functions and the sensitivity of your results to the choice of depth-damage function.



# Depth-Damage

# Expected annual damages

# Discussion